// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  ext_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum SitewideRights {
  None
  Admin
}

model User {
  id            String                @id @default(cuid())
  username      String                @unique
  displayName   String
  email         String                @unique
  firstName     String
  lastName      String
  rights        SitewideRights        @default(None)
  emailVerified DateTime? // Required for NextAuth.js, but never used
  accounts      Account[]
  sessions      Session[]
  classes       ClassroomMembership[]
}

model Classroom {
  id          String                @id @default(cuid())
  displayName String
  members     ClassroomMembership[]
  lessons     Lesson[]
}

enum ClassroomRole {
  Student
  Instructor
}

model ClassroomMembership {
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  classroom   Classroom     @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId String
  role        ClassroomRole @default(Student)

  @@id([userId, classroomId])
}

model Activity {
  id                 String   @id @default(cuid())
  activityType       String
  lesson             Lesson   @relation(fields: [lessonId], references: [id])
  lessonId           String
  displayName        String
  configuration      Json
  supportedLanguages String[]
  order              Int
}

model Lesson {
  id          String     @id @default(cuid())
  displayName String
  classroom   Classroom  @relation(fields: [classroomId], references: [id])
  classroomId String
  date        DateTime   @db.Date
  activities  Activity[]
}
