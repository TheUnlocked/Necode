// @ts-ignore
type Awaitable<T> = T | PromiseLike<T>;

// @ts-ignore
declare const SHOW_TEST: unique symbol;

/**
 * @param assertion
 *      The assertion to be run. Assertion conditions are automatically transformed
 *      into lambdas before being run, so you do not need to write your own error handling code.
 *      However, you may still use an explicit lambda if you wish.
 * @param display
 *      If the assertion fails, the test will fail and this will be displayed.
 *      If set to {@link SHOW_TEST}, the source code of the assertion will be shown.
 */
// @ts-ignore
declare function check(
    assertion: boolean | (() => Awaitable<boolean>),
    display?: typeof SHOW_TEST | string
): void;

/**
 * @param shouldFail
 *    The code to be run, which should throw an error. The code is automatically transformed
 *    into a lambda before being run, so you are not required to use a lambda in this parameter.
 *    However, you may still use an explicit lambda if you wish.
 * @param display
 *    If the assertion fails, the test will fail and this will be displayed.
 *    If set to SHOW_TEST, the source code of the assertion will be shown.
 * @param validateError
 *    If shouldFail throws an error, this predicate can optionally be used to
 *    check properties of the error thrown. If the predicate returns true,
 *    the check will pass, otherwise it will fail. If omitted, any error will pass the check.
 */
// @ts-ignore
declare function checkError(
    shouldFail: boolean | (() => Awaitable<boolean>),
    display?: typeof SHOW_TEST | string,
    validateError?: (error: any) => boolean
): void;

/**
 * @param ms Number of milliseconds to wait. Max: 500ms
 */
// @ts-ignore
declare function wait(ms: number): void;

/**
 * Wait for a condition to be satisfied. 
 * @param condition A condition which will trigger the wait to end
 * @param timeoutMs Number of milliseconds to wait before terminating the wait. Max: 500ms, default: 100ms
 * @returns true if the condition was satisfied, false if it timed out
 */
// @ts-ignore
declare function waitFor(condition: () => Awaitable<any>, timeoutMs?: number): boolean;